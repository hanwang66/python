# 记录所有的金庸小说字典
novel_list = []

def show_menu():
    """显示菜单"""
    print("*" * 50 )
    print("欢迎使用【金庸小说管理系统】 v 1.0")
    print("")
    print("1. 新增小说")
    print("2. 显示全部")
    print("3. 搜索小说")
    print("")
    print("0. 退出系统")
    print("*" * 50)

def new_novel():
    """新增小说"""
    print("-" * 50)
    print("新增小说")
    # 1. 提示用户输入名片的详细信息
    name_str = input("请输入小说名：")
    male_str = input("请输入男主角：")
    female_str = input("请输入女主角：")
    team_str = input("请输出主要的门派: ")
    # 2. 使用用户输入的信息建立一个名片字典
    novel_dict = {"name": name_str,
                  "male": male_str,
                  "female": female_str,
                  "team": team_str}
    # 3. 将名片字典添加到列表中
    novel_list.append(novel_dict)

    # print(novel_list)
    # 4. 提示用户添加成功
    print("添加 %s 的小说成功！" % name_str)

def show_all():
    """显示所有小说"""
    print("-" * 50)
    print("显示所有小说")

    # 判断是否存在名片记录，如果没有，提示用户返回
    if len(novel_list) == 0:
        print("当前没有任何的名片数据，请使用新增功能添加卡片")
        # return 可以返回一个函数的执行结果，同时下方的代码不会被执行
        # 如果 return 后面没有任何的内容，表示会返回到调用函数的位置，并且不会返回任何的结果
        return
    # 打印表头
    for novels in ["小说名","男主角","女主角","门派"]:
        print(novels,end="\t\t")
    print("")

    # 打印分隔线
    print("=" * 50)
    # 遍历名片列表依次输出字典信息
    for novel_dict in novel_list:
        print("%s\t\t%s\t\t%s\t\t%s" % (novel_dict["name"],
                                        novel_dict["male"],
                                        novel_dict["female"],
                                        novel_dict["team"]))

def search_novel():
    """搜索小说"""
    print("-" * 50)
    print("搜索小说")
    # 1.提示用户输入要搜索的姓名
    find_name = input("请输入要搜索的小说名：")
    # 2.遍历小说列表，查询要搜索的姓名，如果没有找到，需要提示用户
    for novel_dict in novel_list:
        if novel_dict["name"] == find_name:
            print("小说名\t\t男主角\t\t女主角\t\t门派")
            print("=" * 50)
            print("%s\t\t%s\t\t%s\t\t%s" % (novel_dict["name"],
                                            novel_dict["male"],
                                            novel_dict["female"],
                                            novel_dict["team"]))
            #  针对找到的名片执行修改和删除的操作
            deal_novel(novel_dict)

            break
    else:
        print("抱歉，没有找到 %s " % find_name)

def deal_novel(find_dict):
    """处理查找到的名片

    :param find_dict:
    """
    # print(find_dict)
    action_str = input("小说已找到，请选择要执行的操作 "
                       "[1] 修改 [2] 删除 [0] 返回上级菜单：")
    if action_str == "1":

        find_dict["name"] = input_novel_info(find_dict["name"],"小说名：")
        find_dict["male"] = input_novel_info(find_dict["male"],"男主角：")
        find_dict["female"] = input_novel_info(find_dict["female"],"女主角：")
        find_dict["team"] = input_novel_info(find_dict["team"],"门派：")

        print("修改名片成功！")
    elif action_str == "2":
        novel_list.remove(find_dict)
        print("删除名片成功")

def input_novel_info(dict_value,tip_message):
    """输入名片信息

    :param dict_value: 字典中原有的值
    :param tip_message: 植入的提示文字
    :return: 如果用户输入了内容，就返回内容，否则返回字典中原有的值
    """
    # 1.提示用户输入内容
    result_str = input(tip_message)
    # 2.针对用户的输入进行判断，如果用户输入了内容，直接返回结果，
    if len(result_str) > 0:
        return result_str
    # 3。如果用户没有输入内容，返回“字典中原有的值”
    else:
        return dict_value
